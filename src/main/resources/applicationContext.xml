<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <!-- 连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="5"/>
        <!-- 连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="15"/>
        <!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="3"/>
        <!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="10"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="3"/>
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
        <property name="maxStatements" value="0"/>
        <!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30"/>
        <!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
            等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <property name="mappingLocations">
            <list>
                <value>classpath:Entity/*.hbm.xml</value>
            </list>
        </property>
    </bean>
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!--Admin-->
    <bean id="Admin" class="Controller.AdminAction" scope="prototype">
        <property name="adminService" ref="adminService"></property>
    </bean>
    <bean id="adminService" class="Service.impl.AdminServiceImpl">
        <property name="adminDao" ref="adminDao"></property>
    </bean>
    <bean id="adminDao" class="Dao.impl.AdminDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--Admin-->

    <!--Index-->
    <bean id="Index" class="Controller.IndexAction" scope="prototype">
        <property name="indexServiceimpl" ref="indexService"></property>
        <property name="adminServiceimpl" ref="adminService"></property>
    </bean>
    <bean id="indexService" class="Service.impl.IndexServiceImpl">
        <property name="indexDao" ref="indexDao"></property>
    </bean>
    <bean id="indexDao" class="Dao.impl.IndexDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--Index-->

    <!--Search-->
    <bean id="Search" class="Controller.SearchAction" scope="prototype">
        <property name="searchServiceimpl" ref="searchService"></property>
    </bean>
    <bean id="searchService" class="Service.impl.SearchServiceImpl">
        <property name="searchDao" ref="searchDao"></property>
    </bean>
    <bean id="searchDao" class="Dao.impl.SearchDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--Search-->

    <!--Content-->
    <bean id="Content" class="Controller.ContentAction" scope="prototype">
        <property name="contentServiceimpl" ref="contentService"></property>
    </bean>
    <bean id="contentService" class="Service.impl.ContentServiceImpl">
        <property name="contentDao" ref="contentDao"></property>
    </bean>
    <bean id="contentDao" class="Dao.impl.ContentDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--Content-->

    <!--Setting-->
    <bean id="Setting" class="Controller.SettingAction" scope="prototype">
        <property name="settingServiceimpl" ref="settingService"></property>
    </bean>
    <bean id="settingService" class="Service.impl.SettingServiceImpl">
        <property name="settingDao" ref="settingDao"></property>
    </bean>
    <bean id="settingDao" class="Dao.impl.SettingDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--Setting-->


</beans>